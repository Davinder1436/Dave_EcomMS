scalar Time

type Account{
    id: String!
    name: String!
    orders: [Order!]!
}

type Product{
    id: String!
    name:String!
    description:String!
    price: Float!
}

type Order{
    id: String!
    createdAt: Time!
    totalPrice: Float! 
    products:[OrderedProduct!]!
}

type OrderedProduct{
    id:String!
    name:String!
    description:String!
    price:Float!
    quantity:Int! 
}

input PaginationInput{
    take:Int
    skip:Int
}


input AccountInput{
    name:String!
}
input ProductInput{
    name:String!
    description:String!
    price: Float!
}

input OrderedProductInput{
    id: String!
    name:String!
    description:String!
    price: Float!
}

input OrderInput{
    accountId:String!
    products:[OrderedProductInput!]!
}


type Mutation {
  # Add a new account
  createAccount(account: AccountInput!): Account!

  # Add a new product
  createProduct(product: ProductInput!): Product!

  # Place a new order
  createOrder(order: OrderInput!): Order!
  
 
}

type Query{
    accounts(pagination:PaginationInput,id:String):[Account!]!
    products(pagination:PaginationInput,query:String,id:String):[Product!]!
}
